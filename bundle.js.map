{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://trello-clone/./src/components/component.ts","webpack://trello-clone/./src/components/add-board.ts","webpack://trello-clone/./src/components/board.ts","webpack://trello-clone/./src/components/boards-item.ts","webpack://trello-clone/./src/components/boards.ts","webpack://trello-clone/./src/app.ts"],"sourcesContent":["export type TCreateElementSettings = {\n  className?: string;\n  tagName?: string;\n  children?: Array<HTMLElement>;\n};\n\nexport class Component {\n  protected readonly element: HTMLElement;\n\n  static createElement({ tagName = 'div', className, children = [] }: TCreateElementSettings): HTMLElement {\n    const element = document.createElement(tagName);\n    if (className) {\n      element.classList.add(className);\n    }\n    if (children.length) {\n      for (const child of children) {\n        element.appendChild(child);\n      }\n    }\n    return element;\n  }\n\n  constructor(tagName: string | undefined = 'div') {\n    if (new.target === Component) {\n      throw Error('This abstract class and it can use only such supper class');\n    }\n    this.element = Component.createElement({ tagName });\n  }\n\n  getElement(): HTMLElement {\n    return this.element;\n  }\n\n  addChildren(children: Array<Component>): void {\n    if (!children.length) return;\n    for (const child of children) {\n      this.element.appendChild(child.getElement());\n    }\n  }\n}\n","import { Component } from 'components/component';\n\nexport class AddBoard extends Component {\n  private readonly addBoardButton: HTMLElement;\n  constructor() {\n    super();\n    this.element.classList.add('add-board');\n    this.addBoardButton = Component.createElement({ className: 'add-board__button' });\n    this.addBoardButton.innerText = 'Add board';\n    this.element.appendChild(this.addBoardButton);\n  }\n\n  onClick(callback: VoidFunction) {\n    this.element.addEventListener('click', callback);\n  }\n\n}\n\n\nexport const addBoard = new AddBoard();\n","import { Component } from 'components/component';\n\nexport type TItem = { id: string; text: string; };\n\ntype TState = {\n  value: string;\n  items: Array<TItem>;\n};\n\nexport class Board extends Component {\n  private readonly titleElement: HTMLElement;\n  private readonly listElement: HTMLElement;\n  private readonly form: HTMLElement;\n  private readonly textarea: HTMLTextAreaElement;\n  private readonly formButtons: HTMLElement;\n  private readonly addButton: HTMLElement;\n  private readonly cancelButton: HTMLElement;\n  private readonly addCardButton: HTMLElement;\n  private state: TState;\n\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      items: []\n    };\n\n    this.element.classList.add('board');\n\n    this.titleElement = Component.createElement({ className: 'board__title' });\n    this.titleElement.contentEditable = 'true';\n    this.titleElement.innerText = 'Input board title';\n\n    this.element.appendChild(this.titleElement);\n\n    this.listElement = Component.createElement({ className: 'board__list' });\n    this.element.appendChild(this.listElement);\n\n    this.textarea = Component.createElement({ className: 'board__form-textarea', tagName: 'textarea' }) as HTMLTextAreaElement;\n    this.textarea.ariaPlaceholder = 'Input your task';\n    this.textarea.value = this.state.value;\n    this.textarea.addEventListener('input', (event) => {\n      this.setState({ value: (<HTMLTextAreaElement>event.target).value });\n    });\n\n    this.addButton = Component.createElement({\n      className: 'board__form-button',\n      tagName: 'button'\n    });\n    this.addButton.classList.add('board__form-button_success')\n    this.addButton.innerText = 'Add card';\n    this.addButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      this.setState({\n        items: [...this.state.items, { id: new Date().toString(), text: this.state.value }]\n      })\n      this.hiddenForm();\n    });\n\n    this.cancelButton = Component.createElement({\n      className: 'board__form-button',\n      tagName: 'button'\n    });\n    this.cancelButton.classList.add('board__form-button_alert')\n    this.cancelButton.innerText = 'Cancel';\n    this.cancelButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      this.hiddenForm();\n    });\n\n    this.formButtons = Component.createElement({\n      className: 'board__form-buttons',\n      children: [this.addButton, this.cancelButton]\n    });\n\n    this.form = Component.createElement({\n      className: 'board__form',\n      tagName: 'div',\n      children: [this.textarea, this.formButtons]\n    });\n    this.element.appendChild(this.form);\n\n    this.addCardButton = Component.createElement({\n      className: 'board__add-card-button'\n    });\n    this.addCardButton.innerHTML = '<span>+</span> Add card';\n    this.addCardButton.addEventListener('click', (event) => {\n      this.showForm();\n    });\n    this.element.appendChild(this.addCardButton);\n  }\n\n  showForm() {\n    this.form.style.display = 'block';\n    this.addCardButton.style.display = 'none';\n    this.addButton.style.pointerEvents = 'none';\n    this.addButton.style.opacity = '.3';\n    this.textarea.focus();\n  }\n\n  hiddenForm() {\n    this.form.style.display = 'none';\n    this.addCardButton.style.display = 'flex';\n    this.setState({ value: '' });\n  }\n\n  renderItems(oldItems: Array<TItem>, newItems: Array<TItem>): void {\n    const length = Math.max(oldItems.length, newItems.length);\n    for (let index = 0; index < length; index++) {\n      const newItem = newItems[index];\n      const oldItem = oldItems[index];\n      if (!newItem && oldItem) {\n        this.element.children[index].remove();\n        return;\n      }\n      if (newItem && !oldItem) {\n        this.addItem(newItem);\n        continue;\n      }\n      if (newItem.text !== oldItem.text) {\n        this.element.children[index].innerHTML = newItem.text;\n      }\n    }\n  }\n  \n  addItem(item: TItem) {\n    const itemElement = Component.createElement({ className: 'board__item' });\n    itemElement.draggable = true;\n    itemElement.innerText = item.text;\n    itemElement.dataset.id = item.id;\n    this.listElement.appendChild(itemElement);\n  }\n\n  set items(items: Array<TItem>) {\n    this.setState({ items })\n  }\n\n  setState(data: Partial<TState>) {\n    const oldState = { ...this.state };\n    this.state = {\n      ...this.state,\n      ...data\n    };\n    if (oldState.value !== this.state.value) {\n      this.textarea.value = this.state.value;\n      if (this.state.value) {\n        this.addButton.style.pointerEvents = 'auto';\n        this.addButton.style.opacity = '1';\n      } else {\n        this.addButton.style.pointerEvents = 'none';\n        this.addButton.style.opacity = '.3';\n      }\n    }\n    this.renderItems(oldState.items, this.state.items);\n  }\n}\n","import { Component } from 'components/component';\n\nexport class BoardsItem extends Component {\n  constructor(board: Component) {\n    super();\n    this.element.classList.add('boards__item');\n    this.addChildren([board]);\n  }\n}\n","import { Board, TItem } from 'components/board';\nimport { BoardsItem } from 'components/boards-item';\nimport { Component } from 'components/component';\n\ntype TBord = {\n  id: string;\n  items: Array<TItem>;\n}\n\ntype TState = {\n  boards: Array<TBord>;\n}\n\nclass Boards extends Component {\n  private state: TState;\n  private dragItem?: HTMLElement;\n  private itemsWithPointerEventNone: Array<HTMLElement> = [];\n\n  constructor() {\n    super();\n    this.element.classList.add('boards');\n\n    this.element.addEventListener('dragstart', event => {\n      if ((<HTMLElement>event.target).classList.contains('board__item')) {\n        setTimeout(() => {\n          (<HTMLElement>event.target).style.display = 'none';\n          this.dragItem = event.target as HTMLElement;\n        }, 0);\n      }\n    });\n\n    this.element.addEventListener('dragend', event => {\n      if ((<HTMLElement>event.target).classList.contains('board__item')) {\n        setTimeout(() => {\n          (<HTMLElement>event.target).style.display = 'block';\n          this.dragItem = undefined;\n        }, 0)\n      }\n    });\n\n    this.element.addEventListener('dragover', event => {\n      if ((<HTMLElement>event.target).classList.contains('board__item')) {\n        (<HTMLElement>event.target).style.pointerEvents = 'none';\n        this.itemsWithPointerEventNone.push(event.target as HTMLElement);\n      }\n      if ((<HTMLElement>event.target).classList.contains('board__list')) {\n        event.preventDefault();\n      }\n    });\n\n    this.element.addEventListener('dragenter', event => {\n      if ((<HTMLElement>event.target).classList.contains('board__list')) {\n        (<HTMLElement>event.target).style.background = 'rgb(34 54 71)';\n      }\n    });\n\n    this.element.addEventListener('dragleave', event => {\n      if ((<HTMLElement>event.target).classList.contains('board__list')) {\n        (<HTMLElement>event.target).style.background = 'none';\n      }\n    });\n\n    this.element.addEventListener('drop', event => {\n      if ((<HTMLElement>event.target).classList.contains('board__list')) {\n        (<HTMLElement>event.target).style.background = 'none';\n        (<HTMLElement>event.target).appendChild(this.dragItem);\n      }\n      this.itemsWithPointerEventNone.forEach(item => item.style.pointerEvents = 'auto');\n      this.itemsWithPointerEventNone = [];\n    });\n\n    this.state = {\n      boards: []\n    }\n  }\n\n  addChildren(children: Array<Component>): void {\n    if (!children.length) return;\n    for (const child of children) {\n      this.element.appendChild(new BoardsItem(child).getElement());\n    }\n  }\n\n  updates(callback: (state: TState) => Partial<TState>) {\n    const oldState = { ...this.state };\n    this.state = {\n      ...this.state,\n      ...callback(this.state)\n    };\n\n    const oldBoards = oldState.boards;\n    const newBoards = this.state.boards;\n    const length = Math.max(oldBoards.length, newBoards.length);\n    for (let index = 0; index < length; index++) {\n      const newBoard = newBoards[index];\n      const oldBoard = oldBoards[index];\n      if (!newBoard && oldBoard) {\n        this.element.children[index].remove();\n        return;\n      }\n      if (newBoard && !oldBoard) {\n        const board = new Board();\n        board.items = newBoard.items;\n        this.addChildren([board]);\n        continue;\n      }\n      if (newBoard.id !== oldBoard.id) {\n        this.element.children[index].remove();\n        const board = new Board();\n        board.items = newBoard.items;\n        this.addChildren([board]);\n      }\n    }\n  }\n}\n\nconst boardsComponent = new Boards();\n\nexport default boardsComponent;\n","import { addBoard } from 'components/add-board';\nimport boardsComponent from 'components/boards';\n\nexport function app(): void {\n  const root = document.getElementById('root');\n  root.innerHTML = '';\n  root.appendChild(boardsComponent.getElement());\n  root.appendChild(addBoard.getElement());\n\n  addBoard.onClick(() => {\n    boardsComponent.updates((state) => ({\n      boards: [...state.boards, { id: new Date().toString(), items: [] }]\n    }));\n  })\n}\n"],"names":["tagName","Component","Error","this","element","createElement","className","children","document","classList","add","length","child","appendChild","getElement","addChildren","addBoard","addBoardButton","innerText","onClick","callback","addEventListener","state","value","items","titleElement","contentEditable","listElement","textarea","ariaPlaceholder","event","setState","target","addButton","preventDefault","id","Date","toString","text","hiddenForm","cancelButton","formButtons","form","addCardButton","innerHTML","showForm","style","display","pointerEvents","opacity","focus","renderItems","oldItems","newItems","Math","max","index","newItem","oldItem","remove","addItem","item","itemElement","draggable","dataset","data","oldState","board","itemsWithPointerEventNone","contains","setTimeout","dragItem","undefined","push","background","forEach","boards","BoardsItem","updates","oldBoards","newBoards","newBoard","oldBoard","Board","root","getElementById"],"sourceRoot":""}